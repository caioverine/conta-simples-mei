name: Deploy to EC2 (Staging) - Remote Build
on:
  push:
    branches:
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: STAGING
    
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Additional cleanup
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/share/swift
          sudo docker system prune -af
          sudo apt-get clean
          sudo apt-get autoremove -y
          # Limpar cache do apt
          sudo rm -rf /var/lib/apt/lists/*
          # Verificar espa√ßo dispon√≠vel
          df -h

      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      # ===== BUILD REMOTO NO GITHUB ACTIONS =====
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: |
            --allow-insecure-entitlement network.host
            --allow-insecure-entitlement security.insecure
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest,${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            # Otimiza√ß√µes para economizar espa√ßo
            GRADLE_OPTS=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+UseG1GC
          # Limitar recursos para evitar overconsumption
          shm-size: 2g

      - name: Cleanup Docker build cache
        if: always()
        run: |
          # Limpar cache de build do Docker
          docker buildx prune -f
          docker system prune -af
          # Verificar espa√ßo ap√≥s build
          df -h
          
      # ===== DEPLOY NO EC2 (APENAS PULL) =====
      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd ${{ secrets.EC2_DEPLOY_PATH }}/backend
            
            # Parar containers existentes
            docker-compose -f docker-compose.staging.yml down || true
            
            # Limpar imagens antigas e √≥rf√£s
            docker image prune -f
            docker system prune -f
            
            # Fazer login no Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
            
            # Pull da nova imagem
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
            
            # Subir containers
            docker-compose -f docker-compose.staging.yml up -d
            
            # Aguardar inicializa√ß√£o
            sleep 30
            
            # Verificar status
            docker-compose -f docker-compose.staging.yml ps
            
            # Health check
            timeout 60s bash -c 'until curl -sf http://localhost:8080/actuator/health; do echo \"Aguardando...\"; sleep 5; done' || {
              echo 'Health check falhou'
              docker-compose -f docker-compose.staging.yml logs --tail=50
              exit 1
            }
            
            echo 'üöÄ Deploy conclu√≠do com sucesso!'
          "
          
      - name: Cleanup
        if: always()
        run: |
          # Limpar credenciais SSH
          rm -f ~/.ssh/id_rsa
          docker system prune -af || true
          sudo apt-get clean || true
services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: conta-simples-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-contasimplesmei}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - conta-simples-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-contasimplesmei}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: conta-simples-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - conta-simples-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Aplicação Spring Boot
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: conta-simples-backend
    restart: unless-stopped
    ports:
      - "${SPRING_PORT:-8080}:8080"
    environment:
      # Configurações do Banco
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-contasimplesmei}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Configurações do Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Configurações da Aplicação
      SPRING_PROFILES_ACTIVE: docker
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      
      # Configurações JVM
      JAVA_OPTS: -Xms256m -Xmx512m -XX:+UseContainerSupport
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - conta-simples-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React (opcional)
  # frontend:
  #   build: 
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: conta-simples-frontend
  #   restart: unless-stopped
  #   ports:
  #     - "${FRONTEND_PORT:-3000}:3000"
  #   depends_on:
  #     - backend
  #   networks:
  #     - conta-simples-network

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Rede interna para comunicação entre containers
networks:
  conta-simples-network:
    driver: bridge
